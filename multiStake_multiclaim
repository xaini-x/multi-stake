/**
 *Submitted for verification at Etherscan.io on 2022-06-30
*/

/**
 *Submitted for verification at Etherscan.io on 2022-06-29
*/

/**
 *Submitted for verification at Etherscan.io on 2022-06-29
*/

// SPDX-License-Identifier: MIT
// File: contracts/ContractManagerInterface.sol


pragma solidity  0.8.0;

interface ContractManagerInterface {
    function setAddress(string calldata _name, address _address) external;
    function getAddress(string calldata _name) external view returns (address);
    function deleteAddress(string calldata _name) external;
}
// File: contracts/storage/UserStorageInterface.sol




interface UserStorageInterface {
    function getUserType(address userAddress) external view returns(string memory);
}
// File: contracts/utils/Context.sol




abstract contract Context {
    // Empty internal constructor, to prevent people from mistakenly deploying
    // an instance of this contract, which should be used via inheritance.
    
    // mo meed to specfy internal in constructor as contract is abstract 
    constructor () { }
    // solhint-disable-previous-line no-empty-blocks

    function _msgSender() internal view returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}
// File: contracts/access/Ownable.sol





/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     *
     * not an internal constructor
     */
    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

// File: contracts/helpers/BaseContract.sol





contract BaseContract is Ownable {
    address internal managerAddress;

    function setManagerAddress(address _managerAddress) public onlyOwner {
        managerAddress = _managerAddress;
    }

    function getManagerAddress() public view returns(address){
        return managerAddress;
    }
}
// File: contracts/security/Pausable.sol





abstract contract Pausable is Ownable {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state. (not internal)
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() public whenNotPaused onlyOwner {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() public whenPaused onlyOwner {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}

// File: contracts/ERC20/IERC20.sol




/**
 * @dev Interface ID of this contract 0x36372b07
 */

interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
// File: contracts/ERC20/extensions/IERC20Metadata.sol





/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}
// File: contracts/ERC20/ERC20.sol








/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin guidelines: functions revert instead
 * of returning `false` on failure. This behavior is nonetheless conventional
 * and does not conflict with the expectations of ERC20 applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
  contract ERC20 is Pausable, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    mapping(string => address) private platformUsers;

    uint256 private _totalSupply;
    uint8 private _decimals;
    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name}, {symbol}, {decimals} and {totalSupply}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_, uint8 decimals_) {
        _name = name_;
        _symbol = symbol_;
        _decimals = decimals_;
        // _totalSupply = totalSupply_ * (10 ** _decimals);
        
        // _balances[_msgSender()] = _totalSupply;
        // emit Transfer(address(0), _msgSender(), _totalSupply);

    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `sender` to `recipient`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) public virtual onlyOwner{
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

// File: contracts/ERC20/GETS.sol








contract GETS is ERC20, BaseContract {
    mapping(string => uint256) public reservation;
    mapping(string => string) public categories;

    uint private tokensPerEther = 4000; 

    enum Phase {
        Init,
        Phase1,
        Phase2,
        Phase3
    }
    Phase private phase = Phase.Init;

    // Name: Gets Smart
    // Symbol: GETS
    // Decimals: 18
    constructor() ERC20("Get Smart", "GETS", 18) {}

    /**
     * @dev Function to activate phase 1.
     */
    function activatePhase1() external onlyOwner {
        require(phase == Phase.Init, "GETS: can be revoked only once");
        // to mint 2200000000 tokens total
        // for students & sponsors 880000000
        // for Open trade 880000000
        // for Lottery Stake 220000000
        // Admin & Legal 220000000
        // uint256 mintAmount;
        categories["student"] = "studentsAndSponsors";
        categories["sponsor"] = "studentsAndSponsors";
        unchecked {
            reservation["studentsAndSponsors"] += 880000000;
            reservation["openTrade"] += 880000000;
            reservation["lotteryStake"] += 220000000;
            reservation["adminAndLegal"] += 220000000;
        }
        _mint(address(msg.sender), 2200000000 * (10**18));
        phase = Phase.Phase1;
    }

    /**
     * @dev Function to activate phase 2.
     */
    function activatePhase2() external onlyOwner {
        require(
            phase == Phase.Phase1,
            "GETS: can be revoked only once & after phase 1"
        );
        // to mint 100000000000 tokens
        // for studentsAndSponsors 30000000000
        // for Open trade 30000000000
        // for Approved Educators 20000000000
        // for Lottery Stake 10000000000
        // Admin & Legal 10000000000
        // uint256 mintAmount;
        unchecked {
            reservation["studentsAndSponsors"] += 30000000000;
            reservation["openTrade"] += 30000000000;
            reservation["approvedEducators"] += 20000000000;
            reservation["lotteryStake"] += 10000000000;
            reservation["adminAndLegal"] += 10000000000;
        }
        _mint(address(msg.sender), 100000000000 * (10**18));
        phase = Phase.Phase2;
    }

    /**
     * @dev Function to activate phase 3.
     */
    function activatePhase3() external onlyOwner {
        require(
            phase == Phase.Phase2,
            "GETS: can be revoked only once & after phase 2"
        );
        // to mint 500000000000 tokens
        // for Debt Lottery 150000000000
        // for Open trade 150000000000
        // for Approved Educators 50000000000
        // for studentsAndSponsors 100000000000
        // DAO 50000000000
        // uint256 mintAmount;
        unchecked {
            reservation["debtLottery"] += 150000000000;
            reservation["openTrade"] += 150000000000;
            reservation["approvedEducators"] += 50000000000;
            reservation["studentsAndSponsors"] += 100000000000;
            reservation["DAO"] += 50000000000;
        }
        _mint(address(msg.sender), 500000000000 * (10**18));
        phase = Phase.Phase3;
    }

    function getTokenPerEther() public view returns(uint) {
        return tokensPerEther;
    }
    
    function setTokenPerEther(uint _totalTokensPerEther) public onlyOwner {
        tokensPerEther = _totalTokensPerEther;
    }
    
    // /**
    //  * @dev Function to transfer token to an address.
    //  * @param recipient: address of the user to whom you want to transfer tokens
    //  * @param amount: Total amount of token/s to transfer
    //  * @return returns true if transfered successfully
    //  */
    // function transfer(address recipient, uint256 amount)
    //     public
    //     override
    //     returns (bool)
    // {
    //     _transfer(_msgSender(), recipient, amount);
    //     return true;
    // }
    
    function transferPrice(address from, address recipient, uint256 amount) public returns (bool) {
        _transfer(from, recipient, amount);
        return true;
    }
    
    /**
     * @dev Function to buy gets token
     */
    function buyGetsToken() external payable {
        ContractManagerInterface _manager = ContractManagerInterface(
            getManagerAddress()
        );
        address userStorageAddress = _manager.getAddress("userStorage");
        UserStorageInterface userStorage = UserStorageInterface(
            userStorageAddress
        );
        string memory userType = userStorage.getUserType(msg.sender);    //admin can only buy
        require(msg.value > 0, "Buy Token: Need to send some amount of ether");          // ether should be more than zero
        uint tokensToBuy = msg.value * tokensPerEther;                    //no.of token need to buy is depend on calculation
        reservation[categories[userType]] -= (tokensToBuy / 10**18);
        // address ownerAddr = owner();
        payable(owner()).transfer(msg.value);
        _transfer(owner(), _msgSender(), tokensToBuy);
    }
}
// File: contracts/getStaking.sol






contract STAKING2 is Ownable {
    GETS public stakingToken;
    // for checking staked amount
    //amount total staked by user
    mapping(address => uint256) private totallock;
    // total staked on contract
    uint256 private totalStaked;
    //detail of the staker
    mapping(address => stakeDetail) public _stakeDetail;
    //total amount available to claim
    mapping(address => uint256) private AvailableForClaim;
    // time after user unstakeAmount to check claim time is over or not
    mapping(address => uint256) public _coolingTime;
     mapping(address => uint256) public index;
    mapping(address => mapping(uint =>uint)) public _unstakeTime;
    mapping(address =>uint) public __unstakeTime;
    //total unstaked amount

    mapping(address => uint256) public totalAmountClaimed;
//  uint index;
    address[] public details;
    bool exist = true;
    uint256 indexID;
    // lockTime period default 1 year
    //  60 * 60 * 24 * 365 = 31536000 sec
    uint256 _lockTimePeriod = 150;
    // lockTime period default 1 week
    // 60 * 60 * 24 * 7 =604800 sec
    uint256 coolingTime = 60;
    //primary wallet where all amount transfer
    address primaryWallet;
    struct stakeDetail {
        uint256 numberOfStake;
        address userAddr;
        mapping(address => uint256[]) stakedTokens;
        mapping(address => uint256[]) lockedTime;
        uint256 totalStaked;
    }

    constructor(address _stakeToken, address _primaryWallet) {
        stakingToken = GETS(_stakeToken);
        primaryWallet = _primaryWallet;
    }

    // staking
    function stake(uint256 _amount) public {
        //check user balance
        //transfer amount to primary wallet
        require(_amount != 0, "zero amount cant stake");
        index[msg.sender]+=1;
        GETS(stakingToken).transferPrice(msg.sender, primaryWallet, _amount);
        //calculate total amount staked in contract
        totalStaked += _amount;
         uint256 lockTimePeriod = block.timestamp + _lockTimePeriod;
               _unstakeTime[msg.sender][index[msg.sender]] += lockTimePeriod;
       if( totallock[msg.sender] == 0){
           __unstakeTime[msg.sender] =lockTimePeriod;
       }
        //amount lockTimeed by user
        totallock[msg.sender] += _amount;
       
        _stakeDetail[msg.sender].numberOfStake += 1;
        _stakeDetail[msg.sender].userAddr = msg.sender;
        _stakeDetail[msg.sender].stakedTokens[msg.sender].push(_amount);
        _stakeDetail[msg.sender].lockedTime[msg.sender].push(lockTimePeriod);
        _stakeDetail[msg.sender].totalStaked = totallock[msg.sender];
        details.push(msg.sender);
        emit _stake(
            msg.sender,
            _stakeDetail[msg.sender].numberOfStake,
            _amount,
            lockTimePeriod
        );
    }

    event _stake(
        address stakerAddr,
        uint256 totalNumberOfStake,
        uint256 amount,
        uint256 AmountlockTill
    );

    // work after lockperiod is over
    // claim only amount which lock period is over
    function Unstake() public {
        require( __unstakeTime[msg.sender] < block.timestamp," next unstake time is not over");
        require(
             _stakeDetail[msg.sender].totalStaked != totalAmountClaimed[msg.sender],
            "no amount staked"
        );
          uint _index;
        for (
            uint256 i = 0;
            i < _stakeDetail[msg.sender].lockedTime[msg.sender].length;
            i++
        )
        
         {
             _index = i +2;
            if (
           
                _stakeDetail[msg.sender].lockedTime[msg.sender][i] <block.timestamp) {
                         
                AvailableForClaim[msg.sender] += _stakeDetail[msg.sender].stakedTokens[msg.sender][i];
                _stakeDetail[msg.sender].stakedTokens[msg.sender][i] = 0;
                _coolingTime[msg.sender] = block.timestamp + coolingTime;
                _stakeDetail[msg.sender].stakedTokens[msg.sender][i] = 0;
                _stakeDetail[msg.sender].lockedTime[msg.sender][i] = 0;
                __unstakeTime[msg.sender] = _unstakeTime[msg.sender][_index];
               
            }
         
        }

        emit _Unstake(
            msg.sender,
           _index,
            AvailableForClaim[msg.sender],
            totalAmountClaimed[msg.sender],
              __unstakeTime[msg.sender]
        );
    }

    event _Unstake(
        address stakerAddr,
       uint index,
        uint256 AmountUnlocked,
        uint256 previouslyClaimed,
         uint nextunstaketime
    ); 

    //amount ready to claim after cooling period
    function AmountUstaked(address addr) public view returns (uint256) {
        return AvailableForClaim[addr];
    }

    // claim mature amount after cooling period
    function Claim() public {
        //check if user has mature amount or not
        require(AvailableForClaim[msg.sender] > 0, "no money to claim ");
        // check if cooling time is over
        require(
            _coolingTime[msg.sender] < block.timestamp,
            "cooling time not over "
        );
        // transfer amount primary wallet to user
        GETS(stakingToken).transferPrice( primaryWallet, msg.sender, AvailableForClaim[msg.sender]);
totallock[msg.sender]-=AvailableForClaim[msg.sender];
        totalAmountClaimed[msg.sender] += AvailableForClaim[msg.sender];
        AvailableForClaim[msg.sender] -= AvailableForClaim[msg.sender];
        _coolingTime[msg.sender] -= _coolingTime[msg.sender];
          
        emit _claim(
            msg.sender,
            AvailableForClaim[msg.sender],
            totalAmountClaimed[msg.sender],
            totallock[msg.sender]
        );
    }

    event _claim(
        address stakerAddr,
        uint256 AvailableForClaim,
        uint256 totalAmountClaimed,
        uint256 totallockOfUser
    );

    // for changing the primary wallet
    //only owner can
    function setPrimaryWallet(address walletAddress) public onlyOwner {
        primaryWallet = walletAddress;
    }

    // get the primary wallet where all amount staked
    function getPrimaryWallet() public view returns (address) {
        return primaryWallet;
    }

    //check if caller is owner return true/false
    function isStaker(address addr ) public view returns (bool) {
        for (uint256 i; i < details.length; i++) {
            if (details[i] == addr ) return exist;
        }
    }

    // total amount staked by the user
    function UserTotallockAmount(address addr ) public view returns (uint256) {
        return totallock[addr];
    }

    //set cooling time only by owner
    function setCoolingTime(uint256 CoolingTime) public onlyOwner {
        coolingTime = CoolingTime;
    }

    //additional time after unlockTime token
    function getCoolingTime() public view returns (uint256) {
        return coolingTime;
    }

    //set cooling time only by owner
    function setlockTimePeriod(uint256 lockTimePeriod) public onlyOwner {
        _lockTimePeriod = lockTimePeriod;
    }

    //additional time after unlockTime token
    function getlockTimePeriod() public view returns (uint256) {
        return _lockTimePeriod;
    }

    // check available balance
    function myBalance(address addr) public view returns (uint256) {
        return GETS(stakingToken).balanceOf(addr );
    }

    // total amount stakwed on contract
    function _totalStaked() public view returns (uint256) {
        return totalStaked;
    }

    //showing amount and lock time of the caller
    function DetailOfStake(address addr)
        public
        view
        returns (uint256[] memory, uint256[] memory)
    {
        return (
            _stakeDetail[addr].stakedTokens[addr],
            _stakeDetail[addr].lockedTime[addr]
        );
    }
 
}
